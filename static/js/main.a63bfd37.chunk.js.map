{"version":3,"sources":["components/Products.js","components/AddProduct.js","components/EditProduct.js","App.js","serviceWorker.js","index.js"],"names":["Products","props","deleteProduct","bind","productCard","id","fetch","method","console","log","window","location","reload","product","key","className","descricao","categorias","categoria","onClick","e","preventDefault","openEdit","style","name","onChange","this","handleChange","required","value","categories","map","category","searchByCategory","products","filter","parseInt","React","Component","AddProduct","onSubmit","addProduct","type","EditProduct","editProduct","defaultValue","closeEdit","App","state","editing","event","setState","target","headers","body","JSON","stringify","id_categoria","requestOptions","then","response","json","prevProps","prevState","res","data","catch","fontFamily","fontSize","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a63bfd37.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Products extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.deleteProduct = this.deleteProduct.bind(this)\r\n    this.productCard = this.productCard.bind(this)\r\n  }\r\n\r\n  deleteProduct(id) {\r\n    fetch('http://localhost:3001/produtos/'+ id, {\r\n      method: 'DELETE'\r\n    });\r\n    console.log(id)\r\n    window.location.reload(false);\r\n  }\r\n\r\n  productCard(product) {\r\n    return (\r\n      <div key={product.id} className=\"card mb-2 shadow-sm\">\r\n        <div className=\"card-body\">\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <h5 className=\"card-title\">{product.descricao}</h5>\r\n              <h6 className=\"card-subtitle mb-1 text-muted\">{product.categorias.categoria}</h6>\r\n            </div>\r\n            <div className=\"col\">\r\n              <button \r\n                onClick={e => {e.preventDefault(); this.props.openEdit(product)}} \r\n                className=\"btn btn-default m-1\" style={{\"float\": \"right\"}}>\r\n                  <i className=\"fas fa-edit mr-1\"></i>\r\n                  Editar\r\n              </button>\r\n              <button \r\n                onClick={e => { e.preventDefault(); this.deleteProduct(product.id) } } \r\n                className=\"btn btn-danger m-1\" style={{\"float\": \"right\"}}>\r\n                  <i className=\"fas fa-trash mr-1\"></i>\r\n                  Apagar\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  )}\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"card m-3 p-3 shadow-lg border-0\">\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <h2>Lista de Produtos</h2>\r\n          </div>\r\n          <div className=\"col\">\r\n            <h5>por categoria:</h5>\r\n            <select className=\"form-control\" name=\"searchByCategory\" onChange={this.props.handleChange} required>\r\n              <option value=''>Todas</option>\r\n              {this.props.categories.map(category => (\r\n                  <option key={category.id} value={category.id}>{category.categoria}</option>\r\n              ))\r\n              }\r\n            </select>\r\n          </div>\r\n        </div>\r\n        {this.props.searchByCategory \r\n        ? (this.props.products\r\n          .filter((product) => product.categorias.id === parseInt(this.props.searchByCategory))\r\n          .map(this.productCard))\r\n        : (this.props.products.map(this.productCard))\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\nexport default Products","import React from 'react'\r\n\r\nclass AddProduct extends React.Component {\r\n  render(){\r\n    return (\r\n      <div className=\"card m-3 p-3 shadow-lg border-0\">\r\n        <h2>Adicionar Produto</h2>\r\n        <form onSubmit={this.props.addProduct}>\r\n          <div className=\"form-group\">\r\n            <label>Nome do produto:</label>\r\n              <input className=\"form-control\" type='text' name=\"product\" onChange={this.props.handleChange} required />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>Categoria:</label>\r\n            <select className=\"form-control\" name=\"category\" id=\"categoria\" onChange={this.props.handleChange} required>\r\n                <option value=''></option>\r\n            {this.props.categories.map(category => (\r\n                <option key={category.id} value={category.id}>{category.categoria}</option>\r\n            ))\r\n            }\r\n            </select>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary m-1\">Adicionar</button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\nexport default AddProduct","import React from 'react'\r\n\r\nclass EditProduct extends React.Component {\r\n    render(){\r\n        return (\r\n            <div className=\"card m-4 p-3 shadow-lg border-0\">\r\n                <h2>Editar Produto</h2>\r\n                <form onSubmit={this.props.editProduct}>\r\n                <div className=\"form-group\">\r\n                    <label>Nome do produto:</label>\r\n                    <input className=\"form-control\" type='text' name=\"product\" value={this.props.product} onChange={this.props.handleChange} required />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Categoria:</label>\r\n                    <select className=\"form-control\" name=\"category\" id=\"categoria\" onChange={this.props.handleChange} required>\r\n                        <option defaultValue></option>\r\n                    {this.props.categories.map((category) => (\r\n                        <option key={category.id} value={category.id}>{category.categoria}</option>\r\n                    ))\r\n                    }\r\n                    </select>\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary m-1\">Editar</button>\r\n                <button \r\n                    onClick={this.props.closeEdit}  \r\n                    className=\"btn btn-danger m-1\">\r\n                        Cancelar\r\n                </button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default EditProduct","import React from 'react';\r\nimport Products from './components/Products';\r\nimport AddProduct from './components/AddProduct';\r\nimport EditProduct from './components/EditProduct';\r\n\r\nclass App extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.state = {\r\n      products: [],\r\n      categories: [],\r\n      editing: false,\r\n      id: null,\r\n      product: '',\r\n      category: null,\r\n      searchByCategory: ''\r\n    }\r\n    this.openEdit = this.openEdit.bind(this)\r\n    this.closeEdit = this.closeEdit.bind(this)\r\n    this.editProduct = this.editProduct.bind(this)\r\n    this.addProduct = this.addProduct.bind(this)\r\n    this.handleChange = this.handleChange.bind(this)\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    })\r\n    //console.log([event.target.name, event.target.value])\r\n  }\r\n\r\n  editProduct(event){\r\n    event.preventDefault();\r\n    console.log([this.state.product,this.state.category])\r\n    fetch('http://localhost:3001/produtos/'+ this.state.id, {\r\n      headers: { \"Content-Type\": \"application/json; charset=utf-8\" },\r\n      method: 'PUT',\r\n      body: JSON.stringify({\r\n        descricao: this.state.product,\r\n        id_categoria: this.state.category\r\n      })\r\n    })\r\n    window.location.reload(false);\r\n  }\r\n\r\n  addProduct(event) {\r\n    event.preventDefault();\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ \r\n        descricao: this.state.product,\r\n        id_categoria: this.state.category\r\n      })\r\n    };\r\n\r\n    fetch('http://localhost:3001/produtos/', requestOptions)\r\n        .then(response => response.json());\r\n    window.location.reload(false);\r\n  }\r\n\r\n  openEdit(product) {\r\n    this.setState({\r\n      editing: true,\r\n      id: product.id,\r\n      product: product.descricao,\r\n      category: product.categorias.id\r\n    })\r\n  }\r\n\r\n  closeEdit(event) {\r\n    event.preventDefault()\r\n    this.setState({\r\n      editing: false,\r\n    })\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    console.log('Component re-rendered.')\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('http://localhost:3001/produtos')\r\n    .then(res => res.json())\r\n    .then((data) => {\r\n      //console.table(data.products);\r\n      this.setState({ products: data.products })\r\n    })\r\n    .catch(console.log)\r\n\r\n    fetch('http://localhost:3001/categorias')\r\n    .then(res => res.json())\r\n    .then((data) => {\r\n      //console.table(data.categorias);\r\n      this.setState({ categories: data.categorias })\r\n    })\r\n    .catch(console.log)\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar-expand navbar-white bg-white shadow-sm\">\r\n          <h1 className=\"pb-2 text-center\"  style={{fontFamily: 'Montserrat', fontSize: 45}}>Gerenciar Produtos</h1>\r\n        </nav>\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              {this.state.editing ?\r\n                <EditProduct product={this.state.product} editProduct={this.editProduct}  closeEdit={this.closeEdit} categories={this.state.categories} handleChange={this.handleChange} /> \r\n                : <AddProduct categories={this.state.categories} handleChange={this.handleChange} addProduct={this.addProduct} />\r\n              }\r\n            </div>\r\n            <div className=\"col\">\r\n              <Products handleChange={this.handleChange} searchByCategory={this.state.searchByCategory} categories={this.state.categories} products={this.state.products} openEdit={this.openEdit} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}